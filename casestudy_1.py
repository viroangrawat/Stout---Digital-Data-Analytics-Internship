# -*- coding: utf-8 -*-
"""casestudy#1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1T0Ol_zdZZwG1ergySw2W8GI2z6J85COr
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
sns.set_theme(style="darkgrid")
import pandas as pd
df = pd.read_csv('loans_full_schema.csv', index_col=0)

df.head()

df['emp_length'].fillna((df['emp_length'].mean()), inplace=True)
df['annual_income_joint'] = df['annual_income_joint'].fillna(0)
df['debt_to_income_joint'] = df['debt_to_income_joint'].fillna(0)
df = df.drop(['emp_length', 'state', "verified_income", "debt_to_income", "annual_income_joint", "verification_income_joint", "debt_to_income_joint", "delinq_2y",
"months_since_last_delinq", "earliest_credit_line",
"inquiries_last_12m",
"total_credit_lines",
"open_credit_lines",
"total_credit_limit",
"total_credit_utilized",
"num_collections_last_12m",
"num_historical_failed_to_pay",
"months_since_90d_late",
"current_accounts_delinq",
"total_collection_amount_ever",
"current_installment_accounts",
"accounts_opened_24m",
"months_since_last_credit_inquiry",
"num_satisfactory_accounts",
"num_accounts_120d_past_due",
"num_accounts_30d_past_due",
"num_active_debit_accounts",
"total_debit_limit",
"num_total_cc_accounts",
"num_open_cc_accounts",
"num_cc_carrying_balance",
"num_mort_accounts",
"account_never_delinq_percent",
"tax_liens",
"grade",
"sub_grade",
"issue_month",
"loan_status",
"initial_listing_status",
"disbursement_method"], axis = 1)
df.head(10)

df.head()

df['balance'].fillna((df['balance'].mean()), inplace=True)
df = df.drop(["paid_late_fees"], axis = 1)

corr1 = df.corr()
print(corr1)

f, ax = plt.subplots(figsize = (12,9))
print((sns.heatmap(corr1, vmax = 0.8, square = True)).figure)

df = df.drop([ "public_record_bankrupt", "loan_purpose", "application_type", ], axis = 1)

df.head()

df.plot(x='interest_rate',y='paid_interest',kind='scatter',color='R', figsize=(10,10))

df[:10].plot(kind = 'hist',subplots=True, layout = (4,3), figsize=(30,30))

df.plot('interest_rate',["annual_income",	"loan_amount",	"term",	"installment",	"balance",	"paid_total",	"paid_principal",	"paid_interest"],kind = 'area',
        colormap='gist_rainbow', figsize=(30,10))

df['interest_rate'].plot(kind='line',xlim=(0,20),ylim=(0,100), figsize=(30,10))

df[:5].plot(x='interest_rate',kind='box', figsize=(30,10))

"""# Method 1 for Predictions of Interest Rate"""

from sklearn.model_selection import train_test_split
train, test = train_test_split(df, test_size = 0.15)
print(len(train), len(test))

train_predictors = train.drop(["interest_rate", "paid_interest", "term"], axis = 1)
train_target = train.drop(list(train_predictors) + ["paid_interest", "term"], axis = 1)
test_predictors = test.drop(["interest_rate", "paid_interest", "term"], axis = 1)
test_target = test.drop(list(test_predictors) + ["paid_interest", "term"], axis = 1)
print(train_predictors.head(5), train_target.head(5))

from sklearn.linear_model import LinearRegression
lr = LinearRegression(normalize = True)
lr.fit(train_predictors, train_target)
train_predictions = lr.predict(train_predictors)
(train_predictions)

from sklearn import metrics
print(np.sqrt(metrics.mean_squared_error(train_target, train_predictions)))
print(metrics.r2_score(train_target, train_predictions))
print(metrics.mean_absolute_error(train_target, train_predictions))

plt.figure(figsize=(30,10))
plt.scatter(train_target, train_predictions)
plt.xlabel("Actual")
plt.ylabel("Predictions")
plt.title("Actual Vs Predictions")
print(plt.show())

"""# Method 2 for Predictions of Interest Rate"""

X = df.drop(['interest_rate'],axis=1) 
Y = df['interest_rate']
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=.20, random_state=0)
from sklearn.tree import DecisionTreeRegressor
DT_model = DecisionTreeRegressor(max_depth=5).fit(X_train,Y_train)
DT_predict = DT_model.predict(X_test) #Predictions on Testing data
print((DT_predict))



