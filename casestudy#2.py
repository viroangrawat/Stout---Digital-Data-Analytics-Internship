# -*- coding: utf-8 -*-
"""CaseStudy#2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GHXn5jfd9LVShGO57MLOn6wxHbXjx3LT
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
sns.set_theme(style="darkgrid")
import pandas as pd
df = pd.read_csv('casestudy.csv', index_col=0)



"""# 2015"""

df.head()

cust_2015 = df[df["year"] == 2015]
print(cust_2015)

total_rev = df.query("year == 2015")['net_revenue'].sum()
print(total_rev)

total_cust = df.query("year == 2015")['net_revenue'].count()
print(total_cust)

"""# 2016"""

total_rev_2016 = df.query("year == 2016")['net_revenue'].sum()
print(total_rev_2016)

cust_2016 = df[df["year"] == 2016]
print(cust_2016)

comm_cust_20162015 = pd.merge(cust_2015, cust_2016, how='inner', on=['customer_email'])
print(comm_cust_20162015)

comm_cust_20162015 = comm_cust_20162015.drop(["net_revenue_x", "year_x", "net_revenue_y", "year_y"], axis=1)
print(comm_cust_20162015)

newcust_2016 = (cust_2016[~cust_2016.customer_email.isin(comm_cust_20162015.customer_email)])
print(newcust_2016)

new_customer_revenue_2016 = newcust_2016['net_revenue'].sum()
print(new_customer_revenue_2016)

new_comm_cust_20162015 = pd.merge(cust_2015, cust_2016, how='inner', on=['customer_email'])
print(new_comm_cust_20162015)
existing_customer_growth = (new_comm_cust_20162015["net_revenue_x"].sum()) - (new_comm_cust_20162015["net_revenue_y"].sum()) 
print(existing_customer_growth)

revenue_attrition_2016 = ((abs(existing_customer_growth)) / total_rev_2016) * 100
print(revenue_attrition_2016)

existing_customers_revenue_2016 = new_comm_cust_20162015["net_revenue_y"].sum()
existing_customers_revenue_2015 = new_comm_cust_20162015["net_revenue_x"].sum()
print(existing_customers_revenue_2016)
print(existing_customers_revenue_2015)

print(cust_2016["customer_email"].count())
print(cust_2015["customer_email"].count())

new_customer_2016 = newcust_2016["customer_email"].count()
lost_customer_2016 = cust_2015["customer_email"].count() - cust_2016["customer_email"].count()
print(new_customer_2016)
print(lost_customer_2016)

"""

# 2017
"""

cust_2017 = df[df["year"] == 2017]
total_rev_2017 = df.query("year == 2017")['net_revenue'].sum()
print(total_rev_2017)
comm_cust_20172016 = pd.merge(cust_2017, cust_2016, how='inner', on=['customer_email'])
print(comm_cust_20172016)

newcust_2017 = (cust_2017[~cust_2017.customer_email.isin(comm_cust_20172016.customer_email)])
print(newcust_2017)
newcust2017_revenue = newcust_2017["net_revenue"].sum()
print(newcust2017_revenue)

new_comm_cust_20172016 = pd.merge(cust_2017, cust_2016, how='inner', on=['customer_email'])
print(new_comm_cust_20172016)
existing_customer_growth_2017 = (new_comm_cust_20172016["net_revenue_x"].sum()) - (new_comm_cust_20172016["net_revenue_y"].sum()) 
print(existing_customer_growth_2017)

revenue_attrition_2017 = ((abs(existing_customer_growth_2017)) / total_rev_2017) * 100
print(revenue_attrition_2017)

existing_customers_revenue_2017 = new_comm_cust_20172016["net_revenue_x"].sum()
existing_customers_revenue_2016 = new_comm_cust_20172016["net_revenue_y"].sum()
print(existing_customers_revenue_2017)
print(existing_customers_revenue_2016)

print(cust_2016["customer_email"].count())
print(cust_2017["customer_email"].count())

new_customer_2017 = newcust_2017["customer_email"].count()
lost_customer_2017 = cust_2017["customer_email"].count() - cust_2016["customer_email"].count()
print(new_customer_2017)
print((lost_customer_2017))



import seaborn as sns
sns.set_theme(style="darkgrid")
ax = sns.countplot(data=cust_2015)

ax1 = sns.countplot(data=cust_2016)

ax2= sns.countplot(data=cust_2017)

"""# Plots"""

plt.bar(["total_revenue_2015", "total_revenue_2016", "total_revenue_2017"], [total_rev, total_rev_2016, total_rev_2017])
plt.show()

import matplotlib.pyplot as plt

plt.bar(["new_customer_2017", "lost_customer_2017"], [new_customer_2017, lost_customer_2017])
plt.show()
plt.bar(["new_customer_2016", "lost_customer_2016"], [new_customer_2016, lost_customer_2016])
plt.show()

